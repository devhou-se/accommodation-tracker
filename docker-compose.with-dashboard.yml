version: '3.8'

services:
  # Main accommodation checker service
  accommodation-checker:
    build: .
    container_name: ryokan-checker-main
    restart: unless-stopped
    volumes:
      - ./config.json:/app/config.json:ro
      - accommodation-data:/app/data
    environment:
      - CONFIG_PATH=/app/config.json
      - LOG_LEVEL=INFO
    networks:
      - ryokan-network
    depends_on:
      - mock-notification
    healthcheck:
      test: ["CMD", "python", "-c", "import asyncio; import sys; sys.path.insert(0, '/app/src'); from main import AccommodationChecker; from config import load_config; asyncio.run(AccommodationChecker(load_config()).health_check())"]
      interval: 60s
      timeout: 15s
      retries: 3
      start_period: 60s

  # Status dashboard web interface  
  status-dashboard:
    build: .
    container_name: ryokan-dashboard
    restart: unless-stopped
    ports:
      - "8000:8000"
    volumes:
      - ./config.json:/app/config.json:ro
      - accommodation-data:/app/data
    environment:
      - CONFIG_PATH=/app/config.json
      - LOG_LEVEL=INFO
    networks:
      - ryokan-network
    command: ["python", "/app/src/web/status_server.py"]
    depends_on:
      - accommodation-checker
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Mock notification service for testing
  mock-notification:
    build: 
      context: ./docker
      dockerfile: Dockerfile.mock
    container_name: ryokan-mock-notify
    restart: unless-stopped
    ports:
      - "8082:8082"
    networks:
      - ryokan-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

volumes:
  accommodation-data:
    driver: local

networks:
  ryokan-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16